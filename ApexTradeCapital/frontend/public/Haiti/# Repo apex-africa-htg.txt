# Repo: apex-africa-htg

Below is a ready-to-push Next.js (App Router) project scaffold matching your spec. Copy these files into a new GitHub repo, set env vars (see `.env.example`), then import the repo on Vercel. Firebase Firestore + Storage are wired via `lib/firebase.ts`. Tailwind is configured. The MarketTicker implements CoinGecko + exchangerate.host with 60s cache + badges. A 1s clock runs on the header in Haiti time.

---

## File tree

```
apex-africa-htg/
├─ app/
│  ├─ (routes)/
│  │  ├─ offers/page.tsx
│  │  ├─ intent/
│  │  │  ├─ new/page.tsx
│  │  │  ├─ [id]/page.tsx
│  │  │  └─ [id]/proof/page.tsx
│  │  ├─ retrait/page.tsx
│  │  ├─ notifications/page.tsx
│  │  ├─ privacy/page.tsx
│  │  ├─ tos/page.tsx
│  │  └─ hidden-admin/page.tsx
│  ├─ layout.tsx
│  ├─ page.tsx
│  └─ globals.css
├─ components/
│  ├─ Banner.tsx
│  ├─ BottomTabBar.tsx
│  ├─ Header.tsx
│  ├─ Footer.tsx
│  ├─ MarketTicker.tsx
│  ├─ ThemeToggle.tsx
│  ├─ LongPressLogo.tsx
│  ├─ AdminGate.tsx
│  ├─ PackageCards.tsx
│  ├─ IntentForm.tsx
│  ├─ ProgressBar.tsx
│  ├─ PhoneE164Input.tsx
│  └─ Sparkline.tsx
├─ lib/
│  ├─ firebase.ts
│  ├─ db.ts
│  ├─ calc.ts
│  ├─ formats.ts
│  ├─ id.ts
│  └─ tz.ts
├─ public/
│  ├─ logo.svg
│  └─ ht-flag.svg
├─ firestore.rules
├─ firestore.indexes.json
├─ next.config.mjs
├─ package.json
├─ postcss.config.js
├─ tailwind.config.ts
├─ tsconfig.json
├─ .env.example
└─ README.md
```

---

## package.json
```json
{
  "name": "apex-africa-htg",
  "private": true,
  "version": "0.1.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "firebase": "^10.12.2",
    "next": "^15.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/node": "^22.5.4",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.6.2"
  }
}
```

---

## tailwind.config.ts
```ts
import type { Config } from 'tailwindcss'

export default {
  darkMode: 'class',
  content: [
    './app/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}'
  ],
  theme: {
    extend: {
      colors: {
        royal: '#1e3a8a', // bleu
        gold: '#D4AF37',  // or
        charcoal: '#111827' // charbon
      }
    }
  },
  plugins: []
} satisfies Config
```

---

## postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

---

## next.config.mjs
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
}
export default nextConfig
```

---

## tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "es2022"],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      { "name": "next" }
    ],
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

---

## .env.example
```bash
# Firebase (Project Settings → Your apps → Web app)
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=

# Admin long-press unlock (store SHA-256 of your 6-digit PIN)
# Example to generate: in browser console -> await crypto.subtle.digest('SHA-256', new TextEncoder().encode('123456'))
# then convert to hex string.
NEXT_PUBLIC_ADMIN_PIN_SHA256=

# Timezone
NEXT_PUBLIC_HAITI_TZ=America/Port-au-Prince
```

---

## app/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --bg: #f8fafc;
  --fg: #0b1220;
}

.dark {
  --bg: #0b1220;
  --fg: #e5edf7;
}

html, body {
  height: 100%;
}
body {
  background: var(--bg);
  color: var(--fg);
}

/* utility */
.container-px { @apply px-4 sm:px-6 lg:px-8; }
.card { @apply rounded-2xl shadow-sm border border-black/5 bg-white dark:bg-black/30 dark:border-white/10; }
.btn { @apply inline-flex items-center justify-center rounded-xl px-4 py-2 text-sm font-medium transition active:scale-[.98]; }
.btn-primary { @apply btn bg-royal text-white hover:opacity-90; }
.btn-outline { @apply btn border border-royal text-royal hover:bg-royal/10 dark:text-gold dark:border-gold dark:hover:bg-gold/10; }
.badge { @apply inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] font-medium; }
.badge-green { @apply badge bg-green-600/10 text-green-700 dark:text-green-300; }
.badge-orange { @apply badge bg-orange-600/10 text-orange-700 dark:text-orange-300; }
.table { @apply w-full text-sm; }
.table th { @apply text-left font-semibold bg-royal text-white sticky top-0; }
.table td, .table th { @apply px-3 py-2; }

/* band banner */
.banner { @apply w-full text-center text-xs md:text-sm bg-black/80 text-white py-2; }
```

---

## lib/tz.ts
```ts
export const HAITI_TZ = process.env.NEXT_PUBLIC_HAITI_TZ || 'America/Port-au-Prince';
export function formatHaiti(dt: Date) {
  const d = new Intl.DateTimeFormat('fr-FR', {
    timeZone: HAITI_TZ,
    year: 'numeric', month: '2-digit', day: '2-digit',
    hour: '2-digit', minute: '2-digit', second: '2-digit'
  }).format(dt);
  return d.replace(',', ''); // JJ/MM/AAAA HH:mm:ss
}
```

---

## lib/formats.ts
```ts
export const fmtUSD = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });
export const fmtHTG = new Intl.NumberFormat('fr-HT', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
export function fmtPct(n: number) { return `${n.toFixed(2)}%`; }
```

---

## lib/calc.ts
```ts
export function fraisAccompagnement(montant: number) {
  const fee = montant * 0.05;
  return Math.min(fee, 10_000);
}

export function totalInvesti(montant: number) {
  return montant + fraisAccompagnement(montant);
}

export function facteurProgression(hoursFromStart: number) {
  if (hoursFromStart >= 24) return 1.08;
  if (hoursFromStart >= 4) return 1.05;
  if (hoursFromStart >= 2) return 1.00; // 100% de progression affichée (palier atteint)
  return 1.00;
}
```

---

## lib/id.ts
```ts
export function makeIntentId(seq: number) {
  const pad4 = String(seq % 10000).padStart(4, '0');
  const now = new Date();
  const y = now.getFullYear();
  const m = String(now.getMonth() + 1).padStart(2, '0');
  const d = String(now.getDate()).padStart(2, '0');
  return `INT-${y}${m}${d}-${pad4}`;
}

export const randomId = () => Math.random().toString(36).slice(2, 10);
```

---

## lib/firebase.ts
```ts
import { initializeApp, getApps } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const storage = getStorage(app);
```

---

## lib/db.ts
```ts
// TypeScript types for your collections
export type Package = { id: string; label: string; montantInvestiHTG: number; multiplier: number; montantPrevuHTG: number };
export type UserDoc = { id: string; email?: string; phoneE164?: string; displayName?: string; role: 'user'|'admin'; consentPhone?: boolean; createdAt: string; lastSeen?: string };
export type Intent = { id: string; userId: string; packageId: string; amountHTG: number; montantPrevuHTG: number; horizon: string; fraisHTG: number; totalInvesti: number; status: string; progressPercent: number; currentPayout: number; createdAt: string; updatedAt: string };
export type Proof = { id: string; intentId: string; fileUrl: string; ocrAmount?: number; ocrDate?: string; ocrRef?: string; confidence?: number; createdAt: string };
export type Code = { id: string; intentId: string; code6: string; createdAt: string; usedAt?: string; usedBy?: string };
export type Notification = { id: string; toUserId?: string|null; filter?: { status?: string, packageId?: string }; title: string; message: string; channel: string; scheduledAt?: string|null; sentAt?: string|null; readBy?: string[]; createdByAdminId?: string; createdAt: string };
export type Withdrawal = { id: string; intentId: string; userId: string; amountHTG: number; requestedAt: string; processedAt?: string|null; status: 'requested'|'processed'|'rejected'; noteAdmin?: string };
export type PaymentMethod = { id: string; network: string; contactName: string; phoneE164: string; displayLabel: string; notes?: string };
export type Activity = { id: string; ts: string; type: string; refId?: string; by?: string };
```

---

## components/ThemeToggle.tsx
```tsx
'use client'
import { useEffect, useState } from 'react'

export function ThemeToggle() {
  const [mounted, setMounted] = useState(false)
  const [dark, setDark] = useState(false)

  useEffect(() => {
    setMounted(true)
    const saved = localStorage.getItem('theme')
    const initial = saved ? saved === 'dark' : false
    setDark(initial)
    document.documentElement.classList.toggle('dark', initial)
  }, [])

  if (!mounted) return null

  return (
    <button
      aria-label="Basculer le thème"
      className="btn border border-white/20 bg-white/10 dark:bg-black/20 text-white"
      onClick={() => {
        const next = !dark
        setDark(next)
        document.documentElement.classList.toggle('dark', next)
        localStorage.setItem('theme', next ? 'dark' : 'light')
      }}
    >{dark ? '☀️' : '🌙'}</button>
  )
}
```

---

## components/LongPressLogo.tsx
```tsx
'use client'
import Image from 'next/image'
import { useEffect, useRef, useState } from 'react'
import { useRouter } from 'next/navigation'

function sha256Hex(str: string) {
  const enc = new TextEncoder().encode(str)
  return crypto.subtle.digest('SHA-256', enc).then(buf =>
    Array.from(new Uint8Array(buf)).map(b => b.toString(16).padStart(2,'0')).join('')
  )
}

export default function LongPressLogo() {
  const [progress, setProgress] = useState(0)
  const timer = useRef<NodeJS.Timeout|null>(null)
  const router = useRouter()

  const start = () => {
    const startedAt = Date.now()
    timer.current = setInterval(() => {
      const ms = Date.now() - startedAt
      const p = Math.min(1, ms / 30000) // 30s
      setProgress(p)
      if (p === 1) {
        clearInterval(timer.current as NodeJS.Timeout)
        promptPin()
      }
    }, 250)
  }
  const stop = () => { if (timer.current) clearInterval(timer.current); setProgress(0) }

  async function promptPin() {
    const pin = window.prompt('Entrer PIN admin (6 chiffres)') || ''
    const hash = await sha256Hex(pin)
    const expected = process.env.NEXT_PUBLIC_ADMIN_PIN_SHA256 || ''
    if (hash === expected) {
      localStorage.setItem('adminUnlocked', '1')
      // Audit trail could be written here via Firestore
      router.push('/hidden-admin')
    } else {
      alert('PIN invalide')
    }
  }

  useEffect(() => () => stop(), [])

  return (
    <button
      className="relative inline-flex items-center gap-2"
      onPointerDown={start}
      onPointerUp={stop}
      onPointerLeave={stop}
      title="Appui long 30s pour admin"
    >
      <Image src="/logo.svg" alt="Apex Africa" width={28} height={28} />
      <span className="text-base font-semibold">Apex Africa HTG</span>
      {progress > 0 && (
        <span className="ml-2 h-1 w-24 rounded bg-white/20 overflow-hidden">
          <span className="block h-full bg-gold" style={{ width: `${progress*100}%` }} />
        </span>
      )}
    </button>
  )
}
```

---

## components/Header.tsx
```tsx
'use client'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import { ThemeToggle } from './ThemeToggle'
import LongPressLogo from './LongPressLogo'
import { formatHaiti } from '@/lib/tz'

export default function Header() {
  const [now, setNow] = useState(() => formatHaiti(new Date()))
  useEffect(() => {
    const t = setInterval(() => setNow(formatHaiti(new Date())), 1000)
    return () => clearInterval(t)
  }, [])

  return (
    <header className="sticky top-0 z-50 bg-royal text-white">
      <div className="container-px flex items-center justify-between py-3">
        <div className="flex items-center gap-3">
          <LongPressLogo />
          <Image src="/ht-flag.svg" alt="Haiti" width={22} height={22} />
        </div>
        <div className="flex items-center gap-3">
          <span className="text-xs sm:text-sm font-mono">{now}</span>
          <ThemeToggle />
        </div>
      </div>
    </header>
  )
}
```

---

## components/Banner.tsx
```tsx
export default function Banner() {
  return (
    <div className="banner">
      🛡️ Vous gardez le contrôle : à tout moment, vous pouvez consulter, modifier ou supprimer vos données personnelles depuis votre espace utilisateur.
    </div>
  )
}
```

---

## components/Footer.tsx
```tsx
import Image from 'next/image'
import { formatHaiti } from '@/lib/tz'

export default function Footer() {
  return (
    <footer className="mt-16 border-t border-black/10 dark:border-white/10">
      <div className="container-px py-8 flex items-center justify-between text-sm">
        <div className="flex items-center gap-3">
          <Image src="/ht-flag.svg" alt="Haiti" width={20} height={20} />
          <span>© {new Date().getFullYear()} Apex Africa HTG</span>
        </div>
        <nav className="flex items-center gap-4">
          <a className="hover:underline" href="/privacy">Confidentialité</a>
          <a className="hover:underline" href="/tos">Conditions</a>
        </nav>
      </div>
    </footer>
  )
}
```

---

## components/BottomTabBar.tsx
```tsx
'use client'
import Link from 'next/link'
import { usePathname } from 'next/navigation'

const tabs = [
  { href: '/', label: 'Accueil' },
  { href: '/dashboard', label: 'Dashboard' },
  { href: '/intent/new', label: 'Nouvelle' },
  { href: '/activity', label: 'Activité' },
  { href: '/notifications', label: 'Notifs' },
  { href: '/retrait', label: 'Retrait' },
  { href: '/account', label: 'Compte' },
  { href: '/soley', label: 'Soley' },
]

export default function BottomTabBar() {
  const pathname = usePathname()
  return (
    <nav className="fixed bottom-0 left-0 right-0 border-t border-black/10 dark:border-white/10 bg-white/95 dark:bg-black/60 backdrop-blur md:hidden">
      <ul className="grid grid-cols-4 text-xs">
        {tabs.slice(0,4).map(t => (
          <li key={t.href}>
            <Link href={t.href} className={`block text-center py-2 ${pathname===t.href? 'text-royal dark:text-gold font-semibold':'text-gray-600 dark:text-gray-300'}`}>{t.label}</Link>
          </li>
        ))}
      </ul>
      <ul className="grid grid-cols-4 text-xs">
        {tabs.slice(4).map(t => (
          <li key={t.href}>
            <Link href={t.href} className={`block text-center py-2 ${pathname===t.href? 'text-royal dark:text-gold font-semibold':'text-gray-600 dark:text-gray-300'}`}>{t.label}</Link>
          </li>
        ))}
      </ul>
    </nav>
  )
}
```

---

## components/Sparkline.tsx
```tsx
export default function Sparkline({ data }: { data: number[] }) {
  if (!data || data.length === 0) return <svg width="120" height="32" />
  const w = 120, h = 32, pad = 2
  const min = Math.min(...data)
  const max = Math.max(...data)
  const norm = (v: number) => max === min ? h/2 : (h - pad*2) * (1 - (v - min) / (max - min)) + pad
  const step = (w - pad*2) / (data.length - 1)
  const path = data.map((v, i) => `${i===0? 'M':'L'} ${pad + i*step} ${norm(v)}`).join(' ')
  return (
    <svg width={w} height={h} viewBox={`0 0 ${w} ${h}`}>
      <path d={path} fill="none" stroke="#D4AF37" strokeWidth="2" strokeLinejoin="round" />
    </svg>
  )
}
```

---

## components/MarketTicker.tsx
```tsx
'use client'
import { useEffect, useRef, useState } from 'react'
import Sparkline from './Sparkline'
import { fmtUSD, fmtHTG, fmtPct } from '@/lib/formats'
import { HAITI_TZ } from '@/lib/tz'

const IDS = 'bitcoin,ethereum,binancecoin,tether,usd-coin,tron,matic-network,solana,cardano'
const COIN_URL = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${IDS}&order=market_cap_desc&per_page=50&page=1&sparkline=true&price_change_percentage=24h`
const FX_URL = 'https://api.exchangerate.host/convert?from=USD&to=HTG'
const TTL_MS = 60_000

export default function MarketTicker() {
  const [rows, setRows] = useState<any[]>([])
  const [live, setLive] = useState(false)
  const [error, setError] = useState<string|null>(null)
  const lastRef = useRef<number>(0)

  async function load(force = false) {
    setError(null)
    const now = Date.now()
    const cached = localStorage.getItem('mt-cache')
    const cache = cached ? JSON.parse(cached) : null
    if (!force && cache && now - cache.ts < TTL_MS) {
      setRows(cache.rows); setLive(true); lastRef.current = cache.ts; return
    }
    try {
      const [coinsRes, fxRes] = await Promise.all([
        fetch(COIN_URL, { cache: 'no-store' }),
        fetch(FX_URL, { cache: 'no-store' })
      ])
      const coins = await coinsRes.json()
      const fx = await fxRes.json()
      const rate = fx?.result || fx?.info?.rate || 0
      const out = coins.map((c: any) => ({
        symbol: c.symbol?.toUpperCase(),
        name: c.name,
        priceUSD: c.current_price,
        priceHTG: c.current_price * rate,
        change24h: c.price_change_percentage_24h,
        sparkline: c.sparkline_in_7d?.price?.slice(-40) || []
      }))
      setRows(out)
      setLive(true)
      localStorage.setItem('mt-cache', JSON.stringify({ ts: now, rows: out }))
      lastRef.current = now
    } catch (e: any) {
      setError('Impossible de joindre les APIs. Affichage du cache si disponible.')
      if (cache) { setRows(cache.rows); setLive(false); lastRef.current = cache.ts }
    }
  }

  useEffect(() => { load(false) }, [])

  const last = new Intl.DateTimeFormat('fr-FR', { timeZone: HAITI_TZ, hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(new Date(lastRef.current||Date.now()))

  return (
    <section className="card p-4">
      <div className="flex items-center justify-between mb-3">
        <h3 className="font-semibold">📈 Marchés en direct</h3>
        <div className="flex items-center gap-2">
          <span className={live? 'badge badge-green':'badge badge-orange'}>{live? 'LIVE':'Hors-ligne'}</span>
          <button className="btn-outline" onClick={() => load(true)}>Actualiser</button>
        </div>
      </div>
      {error && <p className="text-orange-600 dark:text-orange-300 text-sm mb-2">{error}</p>}
      <div className="overflow-x-auto">
        <table className="table min-w-[720px]">
          <thead>
            <tr>
              <th>Symbole</th>
              <th>Nom</th>
              <th>Prix (USD)</th>
              <th>Prix (HTG)</th>
              <th>24h%</th>
              <th>Sparkline (7j)</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r, i) => (
              <tr key={i} className="odd:bg-black/0 even:bg-black/5 dark:even:bg-white/5">
                <td className="font-mono uppercase">{r.symbol}</td>
                <td>{r.name}</td>
                <td>{fmtUSD.format(r.priceUSD)}</td>
                <td>{fmtHTG.format(r.priceHTG)} HTG</td>
                <td className={r.change24h >= 0 ? 'text-green-600 dark:text-green-300' : 'text-red-600 dark:text-red-300'}>{fmtPct(r.change24h)}</td>
                <td><Sparkline data={r.sparkline} /></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <p className="mt-2 text-xs opacity-70">Source: CoinGecko • Dernière MAJ (Heure HT): {last} • Données à titre informatif (DEMO, pas de conseil d’investissement).</p>
    </section>
  )
}
```

---

## components/PackageCards.tsx
```tsx
import Link from 'next/link'

const PACKS = [
  { id: 'bronze', label: 'Bronze', montantInvestiHTG: 5000, multiplier: 1.08, montantPrevuHTG: 5400 },
  { id: 'argent', label: 'Argent', montantInvestiHTG: 10000, multiplier: 1.08, montantPrevuHTG: 10800 },
  { id: 'or', label: 'Or', montantInvestiHTG: 25000, multiplier: 1.08, montantPrevuHTG: 27000 },
  { id: 'platine', label: 'Platine', montantInvestiHTG: 50000, multiplier: 1.08, montantPrevuHTG: 54000 },
]

export default function PackageCards() {
  return (
    <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
      {PACKS.map(p => (
        <div key={p.id} className="card p-4">
          <h3 className="text-lg font-semibold mb-2">{p.label}</h3>
          <ul className="text-sm space-y-1">
            <li>Montant investi: <strong>{p.montantInvestiHTG.toLocaleString('fr-FR')} HTG</strong></li>
            <li>Multiplicateur: <strong>{p.multiplier}</strong></li>
            <li>Montant prévu: <strong>{p.montantPrevuHTG.toLocaleString('fr-FR')} HTG</strong></li>
          </ul>
          <Link href={{ pathname: '/intent/new', query: { packageId: p.id } }} className="btn-primary mt-4 inline-block">Choisir</Link>
        </div>
      ))}
    </div>
  )
}
```

---

## components/PhoneE164Input.tsx
```tsx
'use client'
import { useState } from 'react'

export default function PhoneE164Input({ value, onChange }: { value: string; onChange: (v:string)=>void }) {
  const [raw, setRaw] = useState(value)
  return (
    <input
      className="w-full rounded-xl border border-black/10 dark:border-white/10 bg-white/50 dark:bg-black/30 px-3 py-2"
      placeholder="Téléphone (E.164, ex: +50955551234)"
      value={raw}
      onChange={(e)=>{
        const v = e.target.value.replace(/[^+\d]/g, '')
        setRaw(v); onChange(v)
      }}
    />
  )
}
```

---

## components/IntentForm.tsx
```tsx
'use client'
import { useMemo, useState } from 'react'
import PhoneE164Input from './PhoneE164Input'
import { fraisAccompagnement, totalInvesti } from '@/lib/calc'
import Link from 'next/link'

const PACKS = {
  bronze: { id: 'bronze', label: 'Bronze', montantInvestiHTG: 5000, multiplier: 1.08, montantPrevuHTG: 5400 },
  argent: { id: 'argent', label: 'Argent', montantInvestiHTG: 10000, multiplier: 1.08, montantPrevuHTG: 10800 },
  or: { id: 'or', label: 'Or', montantInvestiHTG: 25000, multiplier: 1.08, montantPrevuHTG: 27000 },
  platine: { id: 'platine', label: 'Platine', montantInvestiHTG: 50000, multiplier: 1.08, montantPrevuHTG: 54000 },
}

type Horizon = '2h'|'4h'|'1j'

export default function IntentForm({ defaultPackageId }: { defaultPackageId?: string }) {
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')
  const [consent, setConsent] = useState(false)
  const [pkg, setPkg] = useState(PACKS[(defaultPackageId as keyof typeof PACKS) || 'bronze'])
  const [horizon, setHorizon] = useState<Horizon>('1j')

  const frais = useMemo(()=>fraisAccompagnement(pkg.montantInvestiHTG), [pkg])
  const total = useMemo(()=>totalInvesti(pkg.montantInvestiHTG), [pkg])

  const gains = useMemo(()=>({
    '2h': pkg.montantPrevuHTG, // affichage palier atteint
    '4h': Math.round(pkg.montantPrevuHTG * 1.05),
    '1j': Math.round(pkg.montantPrevuHTG * 1.08),
  }), [pkg])

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    if (!consent) { alert('Veuillez accepter le traitement de vos données.'); return }
    const id = `INT-${Date.now()}`
    localStorage.setItem('last-intent', JSON.stringify({ id, pkg: pkg.id, email, phone, horizon, frais, total }))
    alert('Intention crée (DEMO). Suivez les instructions de paiement.')
    window.location.href = `/intent/${id}`
  }

  return (
    <form onSubmit={handleSubmit} className="card p-4 space-y-4">
      <div className="grid gap-3 sm:grid-cols-2">
        <div>
          <label className="text-sm">Email</label>
          <input className="w-full rounded-xl border border-black/10 dark:border-white/10 bg-white/50 dark:bg-black/30 px-3 py-2" type="email" value={email} onChange={e=>setEmail(e.target.value)} required />
        </div>
        <div>
          <label className="text-sm">Téléphone</label>
          <PhoneE164Input value={phone} onChange={setPhone} />
        </div>
      </div>

      <div className="grid gap-3 sm:grid-cols-3">
        <div>
          <label className="text-sm">Package</label>
          <select className="w-full rounded-xl border px-3 py-2 bg-white/50 dark:bg-black/30" value={pkg.id} onChange={e=>setPkg(PACKS[e.target.value as keyof typeof PACKS])}>
            {Object.values(PACKS).map(p=> <option key={p.id} value={p.id}>{p.label}</option>)}
          </select>
        </div>
        <div>
          <label className="text-sm">Horizon</label>
          <select className="w-full rounded-xl border px-3 py-2 bg-white/50 dark:bg-black/30" value={horizon} onChange={e=>setHorizon(e.target.value as Horizon)}>
            <option value="2h">2h</option>
            <option value="4h">4h</option>
            <option value="1j">1 jour</option>
          </select>
        </div>
        <div className="self-end">
          <button className="btn-primary w-full" type="submit">Valider</button>
        </div>
      </div>

      <div className="grid gap-3 sm:grid-cols-3">
        <div className="card p-3">
          <div className="text-xs opacity-70">Frais accompagnement (5%, max 10 000 HTG)</div>
          <div className="text-lg font-semibold">{frais.toLocaleString('fr-FR')} HTG</div>
        </div>
        <div className="card p-3">
          <div className="text-xs opacity-70">Total investi</div>
          <div className="text-lg font-semibold">{total.toLocaleString('fr-FR')} HTG</div>
        </div>
        <div className="card p-3">
          <div className="text-xs opacity-70">Gains potentiels ({horizon})</div>
          <div className="text-lg font-semibold">{gains[horizon].toLocaleString('fr-FR')} HTG</div>
        </div>
      </div>

      <div className="text-sm">
        <label className="inline-flex items-center gap-2">
          <input type="checkbox" checked={consent} onChange={e=>setConsent(e.target.checked)} />
          <span>Je consens au traitement de mon téléphone pour contact (facultatif mais recommandé).</span>
        </label>
      </div>

      <div className="text-sm p-3 rounded-xl bg-yellow-500/10 text-yellow-700 dark:text-yellow-300">
        💼 Après validation : vous verrez un récapitulatif et les coordonnées MonCash / NatCash pour le dépôt, puis un bouton « Upload preuve ».
      </div>

      <div className="text-xs opacity-70">
        Les informations affichées sont une démo et ne constituent pas un conseil d’investissement.
      </div>
    </form>
  )
}
```

---

## components/ProgressBar.tsx
```tsx
export default function ProgressBar({ value }: { value: number }) {
  return (
    <div className="w-full h-2 rounded bg-black/10 dark:bg-white/10 overflow-hidden">
      <div className="h-full bg-gold" style={{ width: `${Math.min(100, Math.max(0, value))}%` }} />
    </div>
  )
}
```

---

## app/layout.tsx
```tsx
import type { Metadata } from 'next'
import './globals.css'
import Header from '@/components/Header'
import Footer from '@/components/Footer'
import Banner from '@/components/Banner'
import BottomTabBar from '@/components/BottomTabBar'

export const metadata: Metadata = {
  title: 'Apex Africa HTG',
  description: 'Démo éducative – React + Tailwind + Firebase',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="fr" suppressHydrationWarning>
      <body className="pb-24 md:pb-0">
        <Header />
        <Banner />
        <main className="container-px py-6">{children}</main>
        <Footer />
        <BottomTabBar />
      </body>
    </html>
  )
}
```

---

## app/page.tsx (Accueil)
```tsx
import MarketTicker from '@/components/MarketTicker'
import PackageCards from '@/components/PackageCards'

export default function Page() {
  return (
    <div className="space-y-6">
      <section className="card p-6">
        <h1 className="text-2xl font-bold">Votre compagnon d’investissement</h1>
        <p className="mt-2 text-sm opacity-80">Chatbot (à venir), analytics, UI optimisée, données privées. Posez vos questions, suivez vos performances et passez au niveau supérieur en confiance.</p>
      </section>

      <MarketTicker />

      <section className="space-y-3">
        <h2 className="text-xl font-semibold">Offres</h2>
        <PackageCards />
      </section>

      <section className="card p-6">
        <h2 className="text-xl font-semibold mb-2">FAQ (extrait)</h2>
        <details><summary className="cursor-pointer font-medium">Est-ce légal ?</summary><p className="mt-2 text-sm opacity-80">Cette interface est une <strong>démo pédagogique</strong>. Toute activité d’investissement doit respecter les lois locales et les obligations d’information des investisseurs.</p></details>
        <details className="mt-2"><summary className="cursor-pointer font-medium">Mes données personnelles ?</summary><p className="mt-2 text-sm opacity-80">Vous gardez le contrôle. Consultez/rectifiez/supprimez vos données depuis votre espace utilisateur.</p></details>
      </section>
    </div>
  )
}
```

---

## app/(routes)/offers/page.tsx
```tsx
import PackageCards from '@/components/PackageCards'

export default function OffersPage(){
  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Packages</h1>
      <PackageCards />
    </div>
  )
}
```

---

## app/(routes)/intent/new/page.tsx
```tsx
'use client'
import { useSearchParams } from 'next/navigation'
import IntentForm from '@/components/IntentForm'

export default function NewIntentPage(){
  const sp = useSearchParams()
  const pkg = sp.get('packageId') || undefined
  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Nouvelle intention</h1>
      <IntentForm defaultPackageId={pkg} />
    </div>
  )
}
```

---

## app/(routes)/intent/[id]/page.tsx
```tsx
'use client'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import ProgressBar from '@/components/ProgressBar'

export default function IntentDetailPage({ params }: { params: { id: string } }) {
  const [intent, setIntent] = useState<any|null>(null)
  useEffect(()=>{
    const raw = localStorage.getItem('last-intent')
    if (raw) setIntent(JSON.parse(raw))
  },[])
  if (!intent) return <p>Chargement…</p>

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Intention {params.id}</h1>
      <div className="card p-4 space-y-2">
        <p>Package: <strong>{intent.pkg}</strong></p>
        <p>Email: <strong>{intent.email}</strong></p>
        <p>Téléphone: <strong>{intent.phone}</strong></p>
        <p>Frais: <strong>{intent.frais.toLocaleString('fr-FR')} HTG</strong></p>
        <p>Total investi: <strong>{intent.total.toLocaleString('fr-FR')} HTG</strong></p>
        <ProgressBar value={75} />
      </div>

      <div className="card p-4">
        <h3 className="font-semibold mb-2">Paiement</h3>
        <div className="grid sm:grid-cols-2 gap-3 text-sm">
          <div>
            <p className="font-medium">🔹 MONCASH 🇭🇹</p>
            <ul className="list-disc ml-4">
              <li>Joseph Sylvain – 📞 44461179</li>
              <li>Leroy Marie – 📞 47909512</li>
              <li>Carl ArBentz – 📞 34549812</li>
              <li>Mericie Blanc – 📞 31117432</li>
            </ul>
          </div>
          <div>
            <p className="font-medium">🔹 NATCASH 🇭🇹</p>
            <ul className="list-disc ml-4">
              <li>Mericie Blanc – 📞 55182039 / 📞 35187478</li>
              <li>Carl ArBentz – 📞 41015121</li>
              <li>Exume Edgard – 📞 42160541</li>
            </ul>
          </div>
        </div>
        <div className="mt-3 flex gap-2">
          <Link className="btn-primary" href={`/intent/${params.id}/proof`}>Upload preuve</Link>
          <a className="btn-outline" href={`https://wa.me/50944461179?text=${encodeURIComponent('Bonjour, j\'ai une question sur ma preuve de paiement.')}`} target="_blank">WhatsApp</a>
        </div>
      </div>

      <div className="card p-4">
        <h3 className="font-semibold mb-2">Validation finale</h3>
        <form onSubmit={(e)=>{e.preventDefault(); alert('Code soumis (DEMO).')}} className="flex gap-2">
          <input className="rounded-xl border px-3 py-2 w-40" placeholder="Code final (6)" maxLength={6} />
          <button className="btn-primary">Valider</button>
        </form>
      </div>
    </div>
  )
}
```

---

## app/(routes)/intent/[id]/proof/page.tsx
```tsx
'use client'
import { useState } from 'react'

export default function ProofPage({ params }: { params: { id: string } }) {
  const [file, setFile] = useState<File|null>(null)
  function submit(e: React.FormEvent){ e.preventDefault(); alert('Preuve envoyée (DEMO). OCR simulé.'); window.location.href = `/intent/${params.id}` }
  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Téléverser une preuve</h1>
      <form onSubmit={submit} className="card p-4 space-y-3">
        <input type="file" accept="image/*,application/pdf" onChange={(e)=>setFile(e.target.files?.[0]||null)} />
        <button className="btn-primary" disabled={!file}>Envoyer</button>
      </form>
    </div>
  )
}
```

---

## app/(routes)/retrait/page.tsx
```tsx
'use client'
export default function RetraitPage(){
  const raw = typeof window !== 'undefined' ? localStorage.getItem('last-intent') : null
  const intent = raw ? JSON.parse(raw) : null
  if (!intent) return <p className="card p-4">Aucun retrait disponible.</p>
  return (
    <div className="space-y-3">
      <h1 className="text-2xl font-bold">Retrait</h1>
      <div className="card p-4">
        <p>Intention: <strong>{intent.pkg}</strong></p>
        <p>Montant final (DEMO): <strong>{(intent.total * 1.08).toLocaleString('fr-FR')} HTG</strong></p>
        <button className="btn-primary mt-2" onClick={()=>alert('Demande de retrait créée (DEMO).')}>Demander retrait</button>
      </div>
    </div>
  )
}
```

---

## app/(routes)/notifications/page.tsx
```tsx
export default function NotifsPage(){
  return (
    <div className="space-y-3">
      <h1 className="text-2xl font-bold">Notifications</h1>
      <p className="card p-4">Centre de notifications (DEMO, à connecter à Firestore).</p>
    </div>
  )
}
```

---

## app/(routes)/privacy/page.tsx
```tsx
export default function Privacy(){
  return (
    <article className="prose dark:prose-invert max-w-none">
      <h1>Politique de confidentialité (Démo)</h1>
      <p>Cette interface illustre un parcours utilisateur. Vous pouvez consulter, modifier ou supprimer vos données depuis votre espace utilisateur. Pour toute demande: privacy@apex-africa.ht</p>
    </article>
  )
}
```

---

## app/(routes)/tos/page.tsx
```tsx
export default function TOS(){
  return (
    <article className="prose dark:prose-invert max-w-none">
      <h1>Conditions d’utilisation (Démo)</h1>
      <p>Ce site est fourni à des fins pédagogiques. Aucune promesse de gains. Respectez la réglementation applicable en matière d’investissement en Haïti et dans votre pays de résidence.</p>
    </article>
  )
}
```

---

## app/(routes)/hidden-admin/page.tsx
```tsx
'use client'
import { useEffect, useState } from 'react'

export default function HiddenAdmin(){
  const [ok, setOk] = useState(false)
  useEffect(()=>{ setOk(localStorage.getItem('adminUnlocked')==='1') },[])
  if (!ok) return <p>Accès refusé.</p>
  return (
    <div className="space-y-3">
      <h1 className="text-2xl font-bold">Admin (démo)</h1>
      <p className="card p-4">Filtres intentions, preuves, retraits, notifications, exports CSV (à connecter Firestore & règles).</p>
    </div>
  )
}
```

---

## public/logo.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64"><defs><linearGradient id="g" x1="0" x2="1"><stop stop-color="#D4AF37"/><stop offset="1" stop-color="#1e3a8a"/></linearGradient></defs><circle cx="32" cy="32" r="30" fill="url(#g)"/><path d="M18 38l8-16 6 10 8-6 6 12" fill="none" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/></svg>
```

---

## public/ht-flag.svg
```svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3 2"><rect width="3" height="1" fill="#00209f"/><rect y="1" width="3" height="1" fill="#d21034"/></svg>
```

---

## firestore.rules (starter, tighten for prod)
```txt
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read their own profile; admins (role == 'admin') read all.
    match /users/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Intents: owner read/write; admins can write status.
    match /intents/{id} {
      allow read, create: if request.auth != null; // refine: only owner
      allow update: if request.auth != null; // refine with owner or admin
    }

    // Proofs
    match /proofs/{id} {
      allow read, create: if request.auth != null;
      allow update: if false;
    }

    // Codes - admin only
    match /codes/{id} {
      allow read: if false;
      allow write: if false; // implement via Cloud Functions/admin SDK
    }

    // Notifications
    match /notifications/{id} {
      allow read: if request.auth != null;
      allow write: if false; // admin via functions
    }

    // Withdrawals
    match /withdrawals/{id} {
      allow read, create: if request.auth != null;
      allow update: if false; // admin via functions
    }

    // Activity - read own, write server-side
    match /activity/{id} {
      allow read: if request.auth != null;
      allow write: if false;
    }
  }
}
```

---

## firestore.indexes.json (placeholder)
```json
{
  "indexes": [],
  "fieldOverrides": []
}
```

---

## README.md (setup)
```md
# Apex Africa HTG — React + Tailwind + Firebase (Vercel)

> **Démo pédagogique**. N’activez jamais de flux financiers réels sans conformité légale, KYC, et contrôles de sécurité complets.

## 0) Prérequis
- Node.js LTS (v18+)
- Compte Firebase, Vercel, GitHub

## 1) Cloner & installer
```bash
npx degit your-username/apex-africa-htg apex-africa-htg
cd apex-africa-htg
npm i
```

## 2) Firebase
1. Créez un projet → Ajoutez une **Web app** → récupérez la config → remplissez `.env.local` (copie de `.env.example`).
2. Activez **Firestore** et **Storage**.
3. Déployez les **rules** (ou collez-les depuis `firestore.rules`).
4. Autorisez votre domaine Vercel (`*.vercel.app`) dans les settings d’auth si vous ajoutez Firebase Auth.

## 3) Lancer en local
```bash
npm run dev
```
Ouvrez http://localhost:3000

## 4) GitHub → Vercel
1. Créez un repo GitHub, poussez le code.
2. Sur Vercel → *New Project* → Importez le repo.
3. Ajoutez les **Environment Variables** (onglet Settings → Environment Variables) :
   - `NEXT_PUBLIC_FIREBASE_API_KEY`
   - `NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN`
   - `NEXT_PUBLIC_FIREBASE_PROJECT_ID`
   - `NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET`
   - `NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID`
   - `NEXT_PUBLIC_FIREBASE_APP_ID`
   - `NEXT_PUBLIC_ADMIN_PIN_SHA256`
   - `NEXT_PUBLIC_HAITI_TZ=America/Port-au-Prince`
4. Déployez.

## 5) Couleurs & UI
- Bleu: `#1e3a8a` (tailwind `royal`)
- Or: `#D4AF37`
- Charbon: `#111827`
- Dark/Light toggle via bouton en header.
- Mobile: tab bar bas (8 onglets). Desktop: navbar haut (Header) + tab bar bas (visible aussi sur md<).

## 6) MarketTicker
- CoinGecko (public, sans clé) + exchangerate.host pour USD→HTG.
- Cache localStorage TTL 60s, bouton **Actualiser**, badges **LIVE/Hors-ligne**.
- Sparkline or (#D4AF37). En-tête bleu (#1e3a8a).

## 7) Parcours utilisateur
- `/` Accueil + Marchés + FAQ
- `/offers` Cartes packages
- `/intent/new` Formulaire (email, téléphone, consentement) + calcul frais/total/gains
- `/intent/[id]` Récap + coordonnées MonCash/NatCash + Upload preuve + code final (DEMO)
- `/intent/[id]/proof` Upload preuve (DEMO)
- `/retrait` Demander retrait (DEMO)
- `/notifications` Centre notifications (placeholder)
- `/privacy`, `/tos` Pages légales
- `/hidden-admin` Accès caché via appui long (30s) sur le logo + PIN SHA-256 (démo)

## 8) Sécurité & conformité (à implémenter sérieusement avant prod)
- HTTPS obligatoire (Vercel ok).
- Firestore Rules restrictives + Cloud Functions pour actions admin (codes, retraits, notifications).
- Journalisation (collection `activity`).
- Masquage des numéros côté user; complet côté admin après popup d’avertissement.
- I18N FR/HT/EN: prévoir fichiers de traduction.

## 9) Notes
- Le code admin est **hashé** (SHA-256) via `NEXT_PUBLIC_ADMIN_PIN_SHA256`.
- Le long-press 30s ouvre l’admin (démo). Réduisez à 5s pour dev si besoin.
- Pour WhatsApp, utilisez le format `https://wa.me/<E164>?text=...`.

---

### Disclaimer
Cette base est fournie **à des fins pédagogiques**. Ne présentez jamais des rendements garantis. Respectez la réglementation haïtienne et internationale (KYC/AML, publicité financière, etc.).

---

## NEW: Firebase Auth (email link) — lib/auth.ts
```tsx
'use client'
import { getAuth, isSignInWithEmailLink, onAuthStateChanged, sendSignInLinkToEmail, signInWithEmailLink, signOut, User } from 'firebase/auth'
import { db } from './firebase'
import { doc, serverTimestamp, setDoc } from 'firebase/firestore'

export function auth() { return getAuth() }

export function watchAuth(cb: (u: User|null)=>void) {
  return onAuthStateChanged(getAuth(), cb)
}

export async function startEmailLinkSignIn(email: string) {
  const url = typeof window !== 'undefined' ? window.location.origin + '/account' : process.env.NEXT_PUBLIC_AUTH_CONTINUE_URL!
  const settings = { url, handleCodeInApp: true }
  await sendSignInLinkToEmail(getAuth(), email, settings)
  localStorage.setItem('emailForSignIn', email)
}

export async function completeEmailLinkSignIn() {
  const a = getAuth()
  if (typeof window === 'undefined') return null
  if (isSignInWithEmailLink(a, window.location.href)) {
    const email = localStorage.getItem('emailForSignIn') || window.prompt('Entrez votre email pour confirmer') || ''
    const cred = await signInWithEmailLink(a, email, window.location.href)
    localStorage.removeItem('emailForSignIn')
    // create/update user doc
    await setDoc(doc(db, 'users', cred.user.uid), {
      id: cred.user.uid,
      email: cred.user.email,
      displayName: cred.user.displayName || '',
      role: 'user',
      createdAt: serverTimestamp(),
      lastSeen: serverTimestamp()
    }, { merge: true })
    return cred.user
  }
  return null
}

export async function doSignOut() { await signOut(getAuth()) }
```

---

## NEW: AuthGuard + Account page UI
### components/AuthGuard.tsx
```tsx
'use client'
import { ReactNode, useEffect, useState } from 'react'
import { completeEmailLinkSignIn, watchAuth } from '@/lib/auth'

export default function AuthGuard({ children }: { children: ReactNode }) {
  const [ready, setReady] = useState(false)
  const [user, setUser] = useState<any>(null)
  useEffect(() => {
    const unsub = watchAuth(u => { setUser(u); setReady(true) })
    completeEmailLinkSignIn().catch(()=>{})
    return () => unsub()
  }, [])
  if (!ready) return <p>Chargement…</p>
  if (!user) return <p>Veuillez vous connecter depuis la page Compte pour accéder à cette section.</p>
  return <>{children}</>
}
```

### app/(routes)/account/page.tsx
```tsx
'use client'
import { useEffect, useState } from 'react'
import { doSignOut, startEmailLinkSignIn, watchAuth } from '@/lib/auth'

export default function AccountPage(){
  const [email, setEmail] = useState('')
  const [user, setUser] = useState<any>(null)
  const [sent, setSent] = useState(false)
  useEffect(()=> watchAuth(setUser), [])

  if (user) {
    return (
      <div className="space-y-3">
        <h1 className="text-2xl font-bold">Compte</h1>
        <div className="card p-4 space-y-1">
          <p>Email: <strong>{user.email}</strong></p>
          <button className="btn-outline" onClick={()=>doSignOut()}>Se déconnecter</button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-3">
      <h1 className="text-2xl font-bold">Connexion</h1>
      <form onSubmit={async (e)=>{e.preventDefault(); await startEmailLinkSignIn(email); setSent(true)}} className="card p-4 space-y-3">
        <input className="rounded-xl border px-3 py-2 w-full" type="email" placeholder="Votre email" value={email} onChange={e=>setEmail(e.target.value)} required />
        <button className="btn-primary">Recevoir le lien magique</button>
        {sent && <p className="text-sm opacity-80">Lien envoyé. Ouvrez votre boîte mail et cliquez pour revenir ici.</p>}
      </form>
    </div>
  )
}
```

---

## UPDATE: Intent creation writes to Firestore
Replace the content of **components/IntentForm.tsx** with Firestore write:
```tsx
'use client'
import { useMemo, useState } from 'react'
import PhoneE164Input from './PhoneE164Input'
import { fraisAccompagnement, totalInvesti } from '@/lib/calc'
import Link from 'next/link'
import { addDoc, collection, doc, serverTimestamp, setDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { watchAuth } from '@/lib/auth'

const PACKS = {
  bronze: { id: 'bronze', label: 'Bronze', montantInvestiHTG: 5000, multiplier: 1.08, montantPrevuHTG: 5400 },
  argent: { id: 'argent', label: 'Argent', montantInvestiHTG: 10000, multiplier: 1.08, montantPrevuHTG: 10800 },
  or: { id: 'or', label: 'Or', montantInvestiHTG: 25000, multiplier: 1.08, montantPrevuHTG: 27000 },
  platine: { id: 'platine', label: 'Platine', montantInvestiHTG: 50000, multiplier: 1.08, montantPrevuHTG: 54000 },
}

type Horizon = '2h'|'4h'|'1j'

export default function IntentForm({ defaultPackageId }: { defaultPackageId?: string }) {
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')
  const [consent, setConsent] = useState(false)
  const [pkg, setPkg] = useState(PACKS[(defaultPackageId as keyof typeof PACKS) || 'bronze'])
  const [horizon, setHorizon] = useState<Horizon>('1j')
  const [uid, setUid] = useState<string|undefined>(undefined)
  const [loading, setLoading] = useState(false)

  useMemo(()=>watchAuth(u=>setUid(u?.uid)), [])

  const frais = useMemo(()=>fraisAccompagnement(pkg.montantInvestiHTG), [pkg])
  const total = useMemo(()=>totalInvesti(pkg.montantInvestiHTG), [pkg])

  const gains = useMemo(()=>({
    '2h': pkg.montantPrevuHTG,
    '4h': Math.round(pkg.montantPrevuHTG * 1.05),
    '1j': Math.round(pkg.montantPrevuHTG * 1.08),
  }), [pkg])

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault()
    if (!consent) { alert('Veuillez accepter le traitement de vos données.'); return }
    if (!uid) { alert('Connectez-vous via la page Compte d’abord.'); return }
    setLoading(true)
    try {
      const docRef = await addDoc(collection(db, 'intents'), {
        userId: uid,
        packageId: pkg.id,
        amountHTG: pkg.montantInvestiHTG,
        montantPrevuHTG: pkg.montantPrevuHTG,
        horizon,
        fraisHTG: frais,
        totalInvesti: total,
        status: 'en_revue',
        progressPercent: 0,
        currentPayout: 0,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      })
      await setDoc(doc(db, 'activity', docRef.id), { id: docRef.id, ts: serverTimestamp(), type: 'INTENT_CREATED', by: uid })
      window.location.href = `/intent/${docRef.id}`
    } finally { setLoading(false) }
  }

  return (
    <form onSubmit={handleSubmit} className="card p-4 space-y-4">
      {/* same UI as avant, bouton submit affiche loading */}
      <div className="grid gap-3 sm:grid-cols-2">
        <div>
          <label className="text-sm">Email</label>
          <input className="w-full rounded-xl border px-3 py-2" type="email" value={email} onChange={e=>setEmail(e.target.value)} required />
        </div>
        <div>
          <label className="text-sm">Téléphone</label>
          <PhoneE164Input value={phone} onChange={setPhone} />
        </div>
      </div>

      <div className="grid gap-3 sm:grid-cols-3">
        <div>
          <label className="text-sm">Package</label>
          <select className="w-full rounded-xl border px-3 py-2" value={pkg.id} onChange={e=>setPkg(PACKS[e.target.value as keyof typeof PACKS])}>
            {Object.values(PACKS).map(p=> <option key={p.id} value={p.id}>{p.label}</option>)}
          </select>
        </div>
        <div>
          <label className="text-sm">Horizon</label>
          <select className="w-full rounded-xl border px-3 py-2" value={horizon} onChange={e=>setHorizon(e.target.value as Horizon)}>
            <option value="2h">2h</option>
            <option value="4h">4h</option>
            <option value="1j">1 jour</option>
          </select>
        </div>
        <div className="self-end">
          <button className="btn-primary w-full" disabled={loading}>
            {loading ? 'Création…' : 'Valider'}
          </button>
        </div>
      </div>

      <div className="grid gap-3 sm:grid-cols-3">
        <div className="card p-3"><div className="text-xs opacity-70">Frais (5%, max 10 000)</div><div className="text-lg font-semibold">{frais.toLocaleString('fr-FR')} HTG</div></div>
        <div className="card p-3"><div className="text-xs opacity-70">Total investi</div><div className="text-lg font-semibold">{total.toLocaleString('fr-FR')} HTG</div></div>
        <div className="card p-3"><div className="text-xs opacity-70">Gains ({horizon})</div><div className="text-lg font-semibold">{gains[horizon].toLocaleString('fr-FR')} HTG</div></div>
      </div>

      <label className="inline-flex items-center gap-2 text-sm"><input type="checkbox" checked={consent} onChange={e=>setConsent(e.target.checked)} /><span>Je consens au traitement de mon téléphone (facultatif).</span></label>

      <div className="text-xs opacity-70">Démo: écriture Firestore. Les actions de validation finale devront être côté serveur (Cloud Functions).</div>
    </form>
  )
}
```

---

## UPDATE: Intent detail reads Firestore + Proof upload to Storage
Replace **app/(routes)/intent/[id]/page.tsx** with:
```tsx
'use client'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import ProgressBar from '@/components/ProgressBar'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'

export default function IntentDetailPage({ params }: { params: { id: string } }) {
  const [intent, setIntent] = useState<any|null>(null)
  useEffect(()=>{ (async()=>{ const snap = await getDoc(doc(db, 'intents', params.id)); setIntent(snap.exists()? { id: snap.id, ...snap.data() } : null) })() },[params.id])
  if (intent === null) return <p>Chargement…</p>
  if (!intent) return <p>Introuvable.</p>

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Intention {params.id}</h1>
      <div className="card p-4 space-y-2">
        <p>Package: <strong>{intent.packageId}</strong></p>
        <p>Montant: <strong>{(intent.amountHTG||0).toLocaleString('fr-FR')} HTG</strong></p>
        <p>Frais: <strong>{(intent.fraisHTG||0).toLocaleString('fr-FR')} HTG</strong></p>
        <p>Total investi: <strong>{(intent.totalInvesti||0).toLocaleString('fr-FR')} HTG</strong></p>
        <ProgressBar value={intent.progressPercent||0} />
      </div>

      <div className="card p-4">
        <h3 className="font-semibold mb-2">Paiement</h3>
        <div className="grid sm:grid-cols-2 gap-3 text-sm">
          <div>
            <p className="font-medium">🔹 MONCASH 🇭🇹</p>
            <ul className="list-disc ml-4">
              <li>Joseph Sylvain – 📞 44461179</li>
              <li>Leroy Marie – 📞 47909512</li>
              <li>Carl ArBentz – 📞 34549812</li>
              <li>Mericie Blanc – 📞 31117432</li>
            </ul>
          </div>
          <div>
            <p className="font-medium">🔹 NATCASH 🇭🇹</p>
            <ul className="list-disc ml-4">
              <li>Mericie Blanc – 📞 55182039 / 📞 35187478</li>
              <li>Carl ArBentz – 📞 41015121</li>
              <li>Exume Edgard – 📞 42160541</li>
            </ul>
          </div>
        </div>
        <div className="mt-3 flex gap-2">
          <Link className="btn-primary" href={`/intent/${params.id}/proof`}>Upload preuve</Link>
          <a className="btn-outline" href={`https://wa.me/50944461179?text=${encodeURIComponent('Bonjour, j\'ai une question sur ma preuve de paiement.')}`} target="_blank">WhatsApp</a>
        </div>
      </div>

      <div className="card p-4">
        <h3 className="font-semibold mb-2">Validation finale</h3>
        <form onSubmit={(e)=>{e.preventDefault(); alert('Code soumis (DEMO – côté serveur requis).')}} className="flex gap-2">
          <input className="rounded-xl border px-3 py-2 w-40" placeholder="Code final (6)" maxLength={6} />
          <button className="btn-primary">Valider</button>
        </form>
      </div>
    </div>
  )
}
```

Replace **app/(routes)/intent/[id]/proof/page.tsx** with Storage upload:
```tsx
'use client'
import { useState } from 'react'
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage'
import { storage, db } from '@/lib/firebase'
import { addDoc, collection, serverTimestamp } from 'firebase/firestore'

export default function ProofPage({ params }: { params: { id: string } }) {
  const [file, setFile] = useState<File|null>(null)
  const [progress, setProgress] = useState(0)
  const [done, setDone] = useState<string|null>(null)

  function submit(e: React.FormEvent){
    e.preventDefault()
    if (!file) return
    const path = `proofs/${params.id}/${Date.now()}-${file.name}`
    const task = uploadBytesResumable(ref(storage, path), file)
    task.on('state_changed', s => setProgress( Math.round( (s.bytesTransferred/s.totalBytes)*100 ) ),
      (err)=> alert('Erreur upload: '+err.message),
      async ()=>{
        const url = await getDownloadURL(task.snapshot.ref)
        await addDoc(collection(db,'proofs'), { intentId: params.id, fileUrl: url, createdAt: serverTimestamp(), confidence: 0.0 })
        setDone(url)
      })
  }

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Téléverser une preuve</h1>
      <form onSubmit={submit} className="card p-4 space-y-3">
        <input type="file" accept="image/*,application/pdf" onChange={(e)=>setFile(e.target.files?.[0]||null)} />
        {progress>0 && <div className="text-sm">Progression: {progress}%</div>}
        <button className="btn-primary" disabled={!file}>Envoyer</button>
        {done && <p className="text-green-700 dark:text-green-300 text-sm">Preuve enregistrée. <a className="underline" href={`/intent/${params.id}`}>Retour</a></p>}
      </form>
    </div>
  )
}
```

---

## UPDATE: Retrait page writes Firestore
Replace **app/(routes)/retrait/page.tsx** with:
```tsx
'use client'
import { addDoc, collection, serverTimestamp } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { useEffect, useState } from 'react'
import { watchAuth } from '@/lib/auth'

export default function RetraitPage(){
  const [uid, setUid] = useState<string|undefined>()
  const [intentId, setIntentId] = useState('')
  const [amount, setAmount] = useState(0)
  useEffect(()=>watchAuth(u=>setUid(u?.uid)),[])

  async function createReq(){
    if (!uid) { alert('Connectez-vous.'); return }
    if (!intentId || amount<=0) { alert('Renseignez intention et montant.'); return }
    await addDoc(collection(db,'withdrawals'), { userId: uid, intentId, amountHTG: amount, requestedAt: serverTimestamp(), status:'requ
